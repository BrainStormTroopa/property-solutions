/*
  # Add Reference Numbers, Validation Codes, Drafts, and GDPR

  ## Changes
  
  1. Claims Table Updates
    - Add `reference_number` (auto-generated unique reference like RPS-2024-001234)
    - Add `validation_code` (6-digit code generated by surveyor upon validation)
    - Add `is_draft` boolean (default true for public submissions)
    - Add `draft_expires_at` timestamp (24 hours from creation for drafts)
    - Add GDPR consent fields
  
  2. Update Existing Functions
    - Update `generate_claim_reference()` trigger to handle new fields
  
  3. GDPR Fields
    - `gdpr_consent_given` - boolean for general data processing consent
    - `gdpr_consent_date` - timestamp of consent
    - `gdpr_marketing_consent` - optional marketing consent
  
  4. Contact Fields
    - `submitted_by_email` - email of person submitting (for public claims)
    - `submitted_by_phone` - phone of person submitting
*/

-- Add new columns to claims table
ALTER TABLE claims 
  ADD COLUMN IF NOT EXISTS validation_code TEXT,
  ADD COLUMN IF NOT EXISTS is_draft BOOLEAN DEFAULT true,
  ADD COLUMN IF NOT EXISTS draft_expires_at TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS gdpr_consent_given BOOLEAN DEFAULT false,
  ADD COLUMN IF NOT EXISTS gdpr_consent_date TIMESTAMPTZ,
  ADD COLUMN IF NOT EXISTS gdpr_marketing_consent BOOLEAN DEFAULT false,
  ADD COLUMN IF NOT EXISTS submitted_by_email TEXT,
  ADD COLUMN IF NOT EXISTS submitted_by_phone TEXT;

-- Function to generate 6-digit validation code
CREATE OR REPLACE FUNCTION generate_validation_code()
RETURNS TEXT AS $$
BEGIN
  RETURN LPAD(FLOOR(RANDOM() * 999999)::TEXT, 6, '0');
END;
$$ LANGUAGE plpgsql;

-- Drop existing trigger
DROP TRIGGER IF EXISTS generate_claim_reference_trigger ON claims;

-- Update the trigger function to handle new fields
CREATE OR REPLACE FUNCTION generate_claim_reference()
RETURNS TRIGGER AS $$
DECLARE
  ref_number TEXT;
  year_part TEXT;
  seq_part TEXT;
BEGIN
  -- Generate reference number if not set
  IF NEW.reference_number IS NULL THEN
    year_part := TO_CHAR(NOW(), 'YYYY');
    SELECT COALESCE(MAX(CAST(SUBSTRING(reference_number FROM '[0-9]+$') AS INTEGER)), 0) + 1
    INTO seq_part
    FROM claims
    WHERE reference_number LIKE 'RPS-' || year_part || '-%';
    
    ref_number := 'RPS-' || year_part || '-' || LPAD(seq_part::TEXT, 6, '0');
    NEW.reference_number := ref_number;
  END IF;
  
  -- Set draft expiry to 24 hours if draft
  IF NEW.is_draft = true AND NEW.draft_expires_at IS NULL THEN
    NEW.draft_expires_at := NOW() + INTERVAL '24 hours';
  END IF;
  
  -- Clear draft fields if not draft
  IF NEW.is_draft = false THEN
    NEW.draft_expires_at := NULL;
  END IF;
  
  -- Set GDPR consent date if consent given and date not set
  IF NEW.gdpr_consent_given = true AND NEW.gdpr_consent_date IS NULL THEN
    NEW.gdpr_consent_date := NOW();
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Recreate trigger
CREATE TRIGGER generate_claim_reference_trigger
  BEFORE INSERT OR UPDATE ON claims
  FOR EACH ROW
  EXECUTE FUNCTION generate_claim_reference();

-- Update existing claims to mark as not draft
UPDATE claims 
SET is_draft = false
WHERE is_draft IS NULL OR (is_draft = true AND operative_id IS NOT NULL);

-- Create indexes for performance
CREATE INDEX IF NOT EXISTS idx_claims_validation_code ON claims(validation_code);
CREATE INDEX IF NOT EXISTS idx_claims_is_draft ON claims(is_draft);
CREATE INDEX IF NOT EXISTS idx_claims_draft_expires_at ON claims(draft_expires_at) WHERE is_draft = true;